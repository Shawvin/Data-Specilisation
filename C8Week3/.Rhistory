summary(fit5)
fit5<-lm(mpg~.-cyl-carb-gear-vs-drat-disp,mtcars)
fit4<-lm(mpg~.-cyl-carb-gear-vs-drat-disp,mtcars)
summary(fit4)
fit3<-lm(mpg~.-cyl-carb-gear-vs-drat-disp-hp,mtcars)
summary(fit3)
plot(fit3)
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
dim(mtcars)
str(mtcars)
rm(list=ls())
data(mtcars)
dim(mtcars)
str(mtcars)
fit<-lm(mpg~.,mtcars)
summary(fit)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
##plot(fit1)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
fit<-lm(mpg~.,mtcars)
summary(fit)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
##plot(fit1)
mtcars$cyl<-factor(mtcars$cyl)
mtcars$vs<-factor(mtcars$vs)
mtcars$am<-factor(mtcars$am)
mtcars$gear<-factor(mtcars$gear)
mtcars$carb<-factor(mtcars$carb)
str(mtcars)
fit<-lm(mpg~.,mtcars)
summary(fit)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
##plot(fit1)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
fit<-lm(mpg~.,mtcars)
summary(fit)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
##plot(fit1)
?mtcars
mtcars$cyl<-factor(mtcars$cyl)
mtcars$vs<-factor(mtcars$vs)
mtcars$am<-factor(mtcars$am)
levels(mtcars$am)<-c("auto","manual")
mtcars$gear<-factor(mtcars$gear)
mtcars$carb<-factor(mtcars$carb)
str(mtcars)
fit<-lm(mpg~.,mtcars)
summary(fit)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
##plot(fit1)
mtcars$cyl<-factor(mtcars$cyl)
mtcars$vs<-factor(mtcars$vs)
levels(mtcars$vs)<-c("-Vshaped","-straight")
mtcars$am<-factor(mtcars$am)
levels(mtcars$am)<-c("-auto","-manual")
mtcars$gear<-factor(mtcars$gear)
mtcars$carb<-factor(mtcars$carb)
str(mtcars)
fit<-lm(mpg~.,mtcars)
summary(fit)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
##plot(fit1)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
##plot(fit1)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
plot(predict(fit1),resid(fit1))
fit1<-lm(mpg~am,mtcars)
summary(fit1)
plot(predict(fit1),resid(fit1))
shapiro.test(fit1)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
plot(predict(fit1),resid(fit1))
shapiro.test(predict(fit1))
fit1<-lm(mpg~am,mtcars)
summary(fit1)
plot(predict(fit1),resid(fit1))
shapiro.test(predict(fit1))
fit1<-lm(mpg~am,mtcars)
summary(fit1)
plot(predict(fit1),resid(fit1))
plot(fit1,2)
shapiro.test(predict(fit1))
shapito.test(mtcars$mpg)
shapiro.test(mtcars$mpg)
shapito.test(resid(fit1))
shapiro.test(resid(fit1))
summary(fit1)
plot(predict(fit1),resid(fit1))
fit1$rsquared
coef(fit1)
mtcars$vs<-factor(mtcars$vs)
levels(mtcars$vs)<-c("-Vshaped","-straight")
mtcars$am<-factor(mtcars$am)
levels(mtcars$am)<-c("-auto","-manual")
str(mtcars)
fitall<-lm(mpg~.,mtcars)
step(fitall)
mtcars$vs<-factor(mtcars$vs)
levels(mtcars$vs)<-c("-Vshaped","-straight")
mtcars$am<-factor(mtcars$am)
levels(mtcars$am)<-c("-auto","-manual")
str(mtcars)
data(mtcars)
dim(mtcars)
str(mtcars)
mtcars$vs<-factor(mtcars$vs)
levels(mtcars$vs)<-c("-Vshaped","-straight")
mtcars$am<-factor(mtcars$am)
levels(mtcars$am)<-c("-auto","-manual")
str(mtcars)
step(fitall)
fitall<-lm(mpg~.,mtcars)
step(fitall)
?step
mtcars$vs<-factor(mtcars$vs)
levels(mtcars$vs)<-c("-Vshaped","-straight")
mtcars$am<-factor(mtcars$am)
levels(mtcars$am)<-c("-auto","-manual")
str(mtcars)
fit1<-lm(mpg~am,mtcars)
summary(fit1)
plot(predict(fit1),resid(fit1))
plot(fit1,2)
shapiro.test(predict(fit1))
fitall<-lm(mpg~.,mtcars)
summary(fitall)
fitall<-lm(mpg~.,mtcars)
summary(fitall)
plot(fitall,2)
fitall<-lm(mpg~.,mtcars)
summary(fitall)
plot(fitall,2)
plot(predict(fitall),resid(fitall))
fitall<-lm(mpg~.,mtcars)
summary(fitall)
plot(fitall,2)
plot(predict(fitall),resid(fitall))
shapiro.test(predict(fitall))
fitall<-lm(mpg~.,mtcars)
summary(fitall)
plot(fitall,2)
plot(predict(fitall),resid(fitall))
shapiro.test(predict(fitall))
vif(fitall)
fitall<-lm(mpg~.,mtcars)
summary(fitall)
plot(fitall,2)
plot(predict(fitall),resid(fitall))
shapiro.test(predict(fitall))
Vif(fitall)
?VIF
?Vif
?vif
swirl()\
swirl()
library(swirl)
swirl()
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fitno)=coef(fit0)
coef(fitno)=coef(fit)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-sqrt(resid(fit)/df(fit))
sigma<-sqrt(resid(fit)/nrow(fit))
sigma<-sqrt(deviance(fit)/df.residual(fit))
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,3)
plot(fit,2)
sigma1<-sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno,out2)-predict(fit,out2)
sum(dy^2)/(2*sigma^2)
plot(fit,5)
rm(list=ls())
install.packages("caret")
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
dim(spam)
data(spam)
dim(spam)
names(spam)
library(caret)
?createDataPartition
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
dim(AlzheimerDisease)
dim(predictors)
names(predictors)
dim(diagnosis)
diagnosis
length(diagnosis)
data("concrete")
names(concrete)
names(mixtures)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
class(inTrain)
length(inTrain)
inTrain
str(concrete)
str(mixture)
str(mixtures)
plot(mixtures$CompressiveStrength,col=mixtures$Cement)
plot(mixtures$CompressiveStrength)
g<-ggplot(mixtures,aes(y=CompressiveStrength))
g+geom_point(aes(color=mixtures$Cement))
g<-ggplot()
g+geom_point(mixtures,aes(y=CompressiveStrength,color=Cement))
g+geom_point(aes(y=CompressiveStrength,color=Cement))
g+geom_point(aes(y=mixtures$CompressiveStrength,color=mixtures$Cement))
g+geom_point(aes(x,y=mixtures$CompressiveStrength,color=mixtures$Cement))
library(ggplot2)
g<-ggplot(mixtures,aes(y=CompressiveStrength))
g+geom_point()
rownames(mixtures)
g<-ggplot(mixtures,aes(x=rownames,y=CompressiveStrength))
g+geom_point()
g<-ggplot(mixtures,aes(x=rownames(mixtures),y=CompressiveStrength))
g+geom_point()
g<-ggplot(mixtures,aes(x=rownames(mixtures),y=CompressiveStrength))
g+geom_point(aes(color=mixtures$Cement))
rm(list=ls())
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(AppliedPredictiveModeling)
data(concrete)
head(mixtures)
library(caret)
inTrain<-createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training<-mixtures[inTrain,]
testing<-mixtures[-inTrain,]
plot(training$CompressiveStrength)
library(ggplot2)
qplot(training$CompressiveStrength,geom="point")
qplot(y=training$CompressiveStrength,geom="point")
qplot(CompressiveStrength,training,geom="point")
qplot(CompressiveStrength,data=training,geom="point")
qplot(rownames,CompressiveStrength,data=training,geom="point")
qplot(rownames(training),CompressiveStrength,data=training,geom="point")
g<-ggplot(training,aes(rownames(training),CompressiveStrength,color=Cement))
g+geom_point()
g<-ggplot(training,aes(rownames(training),CompressiveStrength,color=FlyAsh))
g+geom_point()
g<-ggplot(training,aes(rownames(training),CompressiveStrength,color=Age))
g+geom_point()
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
names(adData)
grep("^IL",names(adData))
?grep
grep("^IL",names(adData),value=TRUE)
?preProcess
index<-grep("^IL",names(adData),value=TRUE)
data<-adData[index,]
preProcess(data,thresh=0.8)
data<-adData[,index]
preProcess(data,thresh=0.8)
model<-preProcess(data,thresh=0.8)
model
str(data)
d<-abs(cor(data))
diag(d)<-0
which(d>0.8,arr.ind=TRUE)
which(d>0.7,arr.ind=TRUE)
rm(list=ls())
library(kernlab)
library(caret)
data(spam)
inTrain<-createDataPartition(spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[inTrain]
testing<-spam[-inTrain,]
preObj<-preProcess(spam[,-58],method=c("center","scale"))
names(spam)
capitalAves<-predict(preObj,training[,-58])$capitalAve
mean(capitalAves)
sd(capitalAves)
summary(preObj)
set.seed(32343)
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
library(caret)
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
install.packages("e1071")
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
modelFit
index<-rbinom(nrows(training),size=1,prob=0.5)
index<-rbinom(nrow(training),size=1,prob=0.5)
training$capAve<-training$capitalAve
training$capAve[index]<-NA
preObj<-preProcess(training[,-58],method="knnImpute")
capAve<-predict(preObj,training[,-58])$capAve
install.packages("RANN")
capAve<-predict(preObj,training[,-58])$capAve
capAveTruth<-training$capitalAve
capAveTruth<-(capAveTruth-mean(capAveTruth))/sd(capAveTruth)
range(capAve)
range(capAveTruth)
sd(capAveTruth)
mean(capAveTruth)
mean(capAve)
sd(capAve)
?knnImpute
mean(training$capitalAve)
sd(training$capitalAve)
smallspam<-spam[,c(32,34)]
prComp<-prcomp(smallspam)
str(prComp)
summary(prComp)
range(prComp$x)
length(prComp$x)
prComp$rotation
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain1<-createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training1<-adData[inTrain1,]
testing1<-adData[-inTrain1,]
grep("^IL",names(training1))
grep("^IL",names(training1),value=TRUE)
ILindex<-grep("^IL",names(training1),value=TRUE)
smallTrain<-training1[,ILindex]
prComp1<-prcomp(smallTrain)
summary(prComp1)
prComp1$sdev
(prComp1$sdev)^2/sum((prComp1$sdev)^2)
(prComp1$sdev)^2/sum((prComp1$sdev)^2)*100
prComp1$rotation
modelFit<-train(training1$diagnosis~.,method="glm",data=smallTrain)
training1$diagnosis
modelFit<-train(training1$diagnosis~.,method="glm",data=smallTrain)
modelFit
modelFit1<-train(training1$diagnosis~.,method="glm",data=smallTrain)
modelFit1
preProc1<-preProcess(smallTrain,method="pca",pcaComp=3)
trainPc<-predict(preProc1,smallTrain)
modelFit1<-train(training1$diagnosis~.,method="glm",data=trainPc)
smallTrain<-cbind(smallTrain,training1$diagnosis)
names(smallTrain)
preProc1<-preProcess(smallTrain[,-13],method="pca",pcaComp=3)
trainPc<-predict(preProc1,smallTrain[,-13])
modelFit1<-train(diagnosis~.,method="glm",data=trainPc)
modelFit1<-train(smallTrain$diagnosis~.,method="glm",data=trainPc)
table(smallTrain$diagnosis)
table(training1$diagnosis)
modelFit1<-train(smallTrain$training1$diagnosis~.,method="glm",data=trainPc)
table(smallTrain$training1$diagnosis)
table(smallTrain[,training1$diagnosis])
table(smallTrain[,"training1$diagnosis"])
modelFit1<-train(smallTrain[,"training1$diagnosis]"~.,method="glm",data=trainPc)
modelFit1<-train(smallTrain[,"training1$diagnosis"]~.,method="glm",data=trainPc)
rm(list=ls())
version
?builder
library(shiny)
?builder
runApp('C9Week1/Slider')
runApp('C9Week1/Slider')
runApp('C9Week1/myApp')
rm(ls=list())
rm(list=ls())
shiny::runApp('C9Week1/Predict')
runApp('C9Week1/Predict')
mtcars$mpgsp<-ifelse(mtcars$mpg>20,mtcars$mpg-20,0)
head(mtcars)
runApp('C9Week1/Predict')
getwd()
ls()
ls
dir()
setwd(C8Week2)
setwd("C8Week3")
dir.create("C8Week3")
setwd("C8Week3")
package_version("AppliedPredictiveModeling")
package_version(AppliedPredictiveModeling)
library("AppliedPredictiveModeling")
package_version(AppliedPredictiveModeling)
package_version("AppliedPredictiveModeling")
package_version(caret)
package_version("caret")
?package_version
getRversion()
getRversion(AppliedPredictiveModeling)
getRversion("AppliedPredictiveModeling")
packageDescription(AppliedPredictiveModeling)
packageDescription("AppliedPredictiveModeling")
packageDescription("AppliedPredictiveModeling")$version
packageVersion("AppliedPredictiveModeling")
packageVersion("caret")
packageVersion("ElemStatLearn")
install.packages("ElemStatLearn")
packageVersion("ElemStatLearn")
packageVersion("pgmm")
install.packages("pgmm")
packageVersion("pgmm")
packageVersion("rpart")
source('~/.active-rstudio-document')
names(segmentationOriginal)
table(segmentationOriginal$Case)
class(segmentationOriginal$Case)
str(segmentationOriginal$Case)
table(segmentationOriginal$Case=="Train")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
table(segmentationOriginal$Cell)
table(segmentationOriginal$Class)
names(segmentationOriginal)[3]
source('~/.active-rstudio-document')
str(segmentationOriginal)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
table(testing$Class,predictTest)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain<-segmentationOriginal$Case=="Train"
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[!inTrain,]
set.seed(125)
modFit<-train(Class~.-Cell-Case,data=training,method="rpart")
dataA<-data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
dataB<-data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10,VarIntenCh4 = 100)
dataC<-data.frame(TotalIntench2 = 57,000, FiberWidthCh1 = 8,VarIntenCh4 = 100 )
dataD<-data.frame(FiberWidthCh1 = 8,VarIntenCh4 = 100, PerimStatusCh1=2)
predictTest<-predict(modFit,testing)
#predict(modFit,dataA)
#predict(modFit,dataB)
#predict(modFit,dataC)
#predict(modFit,dataD)
modFit
table(testing$Class,predictTest)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
modFit$finalModel
library(rattle)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
source('~/.active-rstudio-document')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
?sample
sample(1:10,size=5,replace = FALSE)
rm(list=ls())
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
str(SAheart)
?train
?trainControl
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
predict(modFit,trainSA)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
predict(modFit,trainSA)\
predict(modFit,trainSA)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
predict(modFit,testSA,type="prob")
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",
family="binomial")
predict(modFit,testSA,type="prob")
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
predict(modFit,testSA)
table(testSA$chd,predict(modFit,testSA))
table(predict(modFit,trainSA)>0.5)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q4.R')
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
rm(list=ls())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dim(vowel.test)
names(vowel.test)
?randomForest
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
