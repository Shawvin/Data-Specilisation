t<-table(tstest<pred$upper$tstest>pred$lower)
t<-table(tstest<pred$upper&tstest>pred$lower)
prop.table(t)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
head(training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
modFit<-svm(CompressiveStrength~.,data=training)
predict(modFit,testing)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
modFit<-svm(CompressiveStrength~.,data=training)
pred<-predict(modFit,testing)
summary(modFit)
modFit
sqrt(sum(pred-testing$CompressiveStrength)^2)
source('~/.active-rstudio-document')
sqrt(sum(pred-testing$CompressiveStrength)^2)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q3.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q3.R')
plot.enet(modFit$finalModel,xvar="penalty".use.color=TRUE)
plot.enet(modFit$finalModel,xvar="penalty",use.color=TRUE)
accuracy(pred,testing$CompressiveStrength)
accuracy(pred,testing$CompressiveStrength)$RMSE
shiny::runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp()
runApp()
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/BrushDemo')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
getwd()
install.packages("plotly")
library(plotly)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
data(mtcars)
head(mtcars)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
library(plotly)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
?plot_ly
plot_ly(data=mtcars,x=wt,y=mpg,mode="markers")
plot_ly(data=mtcars,x=~wt,y=~mpg,mode="markers")
load("C:/Users/Wang Xiaoyuan/Desktop/Coursera/specdata/.RData")
knitr::opts_chunk$set(echo = TRUE)
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
index<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
selected<-names(training)[!index]
training<-training[,selected]
training<-training[,-c(1:6)]
str(training)
library(caret)
?datapartition
inTrain<-createDataPartition(training$classe,p=0.8)
subtaining<-training[inTrain,]
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtaining<-training[inTrain,]
subtraining<-training[inTrain,]
subValidation<-training[-inTrain,]
modFit1<-train(classe~.,data=subtraining,method="rpart")
modFit1
corr(subtraining)
cor(subtraining)
rm("subtaining")
str(subtraining)
preObj<-preProcess(subtraining,method=c("center","scale"))
preObj
preObj$centered
summary(preObj)
psub<-predict(preObj,subtraining)
str(psub)
range(psub)
str(psub$roll_belt)
range(psub$roll_belt)
range(psub$gyros_forearm_y)
modFit1<-train(classe~.,data=subtraining,method="rpart")
rm("preObj")
rm("psub")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DataExplorer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(caret))
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
t<-table(sapply(training,class))
t
```{r,comment=""}
## index1 checks the missing value in integer and numeric varibles
index1<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
training<-training[,!index1]
## index2 checks the missing value in factor varibles
index2<-apply(training,2,function(x){sum(x=="")/length(x)>0.95})
training<-training[,!index2]
training<-training[,-c(1,3:7)]
dim(training)
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtrain<-training[inTrain,]
subVali<-training[-inTrain,]
modFit1<-train(classe~.,data=subtrain,method="rpart")
modFit2<-train(classe~.,data=subtrain,method="glm")
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtrain<-training[inTrain,]
subVali<-training[-inTrain,]
modFit1<-train(classe~.,data=subtrain,method="rpart")
modFit2<-train(classe~.,data=subtrain,method="rf",trControl=trainControl(method="cv"),number=3)
confusionMatrix(predict(modFit1,subVali),subVali$classe)
confusionMatrix(predict(modFit2,subVali),subVali$classe)
modFit2<-train(classe~.,data=subtrain,method="rf",trControl=trainControl(method="cv"),number=3)
confusionMatrix(predict(modFit1,subVali),subVali$classe)
confusionMatrix(predict(modFit2,subVali),subVali$classe)
predict(modFit2,testing)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DataExplorer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(caret))
if(! file.exists("training.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv")
if(! file.exists("testing.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv")
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
t<-table(sapply(training,class))
t
plot_missing(training)
## index1 checks the missing value in integer and numeric varibles
index1<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
training<-training[,!index1]
## index2 checks the missing value in factor varibles
index2<-apply(training,2,function(x){sum(x=="")/length(x)>0.95})
training<-training[,!index2]
training<-training[,-c(1,3:7)]
dim(training)
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtrain<-training[inTrain,]
subVali<-training[-inTrain,]
modFit1<-train(classe~.,data=subtrain,method="rpart")
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtrain<-training[inTrain,]
subVali<-training[-inTrain,]
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv"),number=3)
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv",number=3))
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv",number=10))
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv"),number=10)
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit2<-train(classe~.,data=subtrain,method="rf",trControl=trainControl(method="cv"),number=3)
confusionMatrix(predict(modFit2,subVali),subVali$classe)
modFit2
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv"))
modFit1
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit1<-train(classe~.,data=subtrain,method="rpart")
modFit1
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit2<-train(classe~.,data=subtrain,method="rf",trControl=trainControl(method="cv"))
modFit2
confusionMatrix(predict(modFit2,subVali),subVali$classe)
summary(modFit2)
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
t<-table(sapply(training,class))
t
plot_missing(training)
## index1 checks the missing value in integer and numeric varibles
index1<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
training<-training[,!index1]
## index2 checks the missing value in factor varibles
index2<-apply(training,2,function(x){sum(x=="")/length(x)>0.95})
training<-training[,!index2]
training<-training[,-c(1,3:7)]
dim(training)
traincontrol<-trainControl(method="cv")
modFit1<-train(classe~.,data=training,method="rpart",trControl=traincontrol)
modFit2<-train(classe~.,data=training,method="rf",trControl=traincontrol)
modFit1
modFit2
predict(modFit2,testing)
modFit3<-train(classe~.,data=training,method="rf")
modFit3<-train(classe~.,data=training,method="rf")
modFit3
modFit3<-train(classe~.,data=training)
modFit3<-train(classe~.,data=training,method="party")
modFit3<-train(classe~.,data=training,method="gbm",trControl=traincontrol)
modFit4<-train(classe~.,data=training,method="lda",trControl=traincontrol)
modFit3
modFit4
getwd()
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DataExplorer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(caret))
if(! file.exists("training.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv")
if(! file.exists("testing.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv")
getwd()
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DataExplorer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(caret))
if(! file.exists("training.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv")
if(! file.exists("testing.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv")
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
t<-table(sapply(training,class))
t
plot_missing(training)
## index1 checks the missing value in integer and numeric varibles
index1<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
training<-training[,!index1]
## index2 checks the missing value in factor varibles
index2<-apply(training,2,function(x){sum(x=="")/length(x)>0.95})
training<-training[,!index2]
training<-training[,-c(1,3:7)]
dim(training)
traincontrol<-trainControl(method="cv")
modFit1<-train(classe~.,data=training,method="rpart",trControl=traincontrol)
modFit2<-train(classe~.,data=training,method="rf",trControl=traincontrol)
modFit3<-train(classe~.,data=training,method="gbm",trControl=traincontrol,verbose=FALSE)
modFit4<-train(classe~.,data=training,method="lda",trControl=traincontrol)
modFit1
modFit2
modFit3
modFit4
result<-predict(modFit2,testing)
result
modFit1
modFit2
modFit3
modFit4
rm(ls=list())
rm(list=ls()
)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(caret))
suppressMessages(library(DMwR))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(Hmisc))
if (!file.exists("train.csv"))
download.file("https://www.kaggle.com/c/titanic/download/train.csv","train.csv")
if (!file.exists("test.csv"))
download.file("https://www.kaggle.com/c/titanic/download/test.csv","test.csv")
train<-read.csv("train.csv")
test<-read.csv("test.csv")
names(train)
names(test)
test$Survived<-rep(NA,dim(test)[1])
total<-rbind(train,test)
str(total)
missingRate<-function(x)
{if (is.character(x))
{round(sum(x=="")/length(x)*100,3)}
else
{round(sum(is.na(x))/length(x)*100,3)}
}
missing<-sapply(total,missingRate)%>% data.frame()
names(missing)<-"missingRate"
missing$column<-rownames(missing)
rownames(missing)<-1:nrow(missing)
g<-ggplot(data.frame(missing),aes(x=reorder(column,missingRate),y=missingRate,fill=column))+geom_bar(stat="identity")+coord_flip(ylim=c(0,100))+geom_text(aes(label=missingRate),nudge_y=3)
g
total$Age<-knnImputation(total[,-2])$Age
missingIndex<-which(total$Embarked=="")
total[missingIndex,]$Embarked<-NA
total$Embarked<-knnImputation(total[,-2])$Embarked
total$Fare<-knnImputation(total[,-2])$Fare
total$Survived<-as.factor(total$Survived)
train$Survived<-as.factor(train$Survived)
dim(total)
n=nrow(train)
train<-total[1:n,]
table(total$Pclass)
ggplot(train,aes(Pclass,fill=Survived))+geom_bar(position="fill")
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
table(total$Sex)
quantile(total$Age)
ggplot(train,aes(Sex,fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(cut2(Age,18),fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(SibSp,fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(Parch,fill=Survived))+geom_bar(position="fill")
total$Familysize=total$SibSp+total$Parch
str(total$Ticket)
tnum<-table(total$Ticket)
TicketType<-function(x){
ifelse(tnum[x]>1,"Shared","Single")
}
total$TicketType<-as.factor(sapply(as.character(total$Ticket),TicketType))
quantile(total$Fare)
ggplot(train,aes(cut2(Fare,g=4),fill=Survived))+geom_bar(position="fill")
table(total$Embarked)
ggplot(train,aes(Embarked,fill=Survived))+geom_bar(position="fill")
n=nrow(train)
train<-total[1:n,]
test<-total[-(1:n),]
inTrain<-createDataPartition(train$Survived,p=0.8,list = FALSE)
subtrain<-train[inTrain,]
subtest<-train[-inTrain,]
traincontrol<-trainControl(method="cv")
traindata<-subtrain[,-c(1,4,7,8,9,11)]
modFit<-train(as.factor(Survived)~.,data=traindata,method="rf",trControl=traincontrol)
modFit2<-train(as.factor(Survived)~.,data=traindata,method="rpart",trControl=traincontrol)
modFit3<-train(as.factor(Survived)~.,data=traindata,method="gbm",trControl=traincontrol,verbose=FALSE)
modFit4<-train(as.factor(Survived)~.,data=traindata,method="nb",trControl=traincontrol)
modFit
modFit2
modFit3
modFit4
pred1<-predict(modFit,subtrain)
pred2<-predict(modFit2,subtrain)
pred3<-predict(modFit3,subtrain)
predDF<-data.frame(v1=pred1,v2=pred2,v3=pred3,Survived=subtrain$Survived)
combmodFit<-train(Survived~.,data=predDF,method="gam")
pred1V<-predict(modFit,subtest)
pred2V<-predict(modFit2,subtest)
pred3V<-predict(modFit3,subtest)
predVDF<-data.frame(v1=pred1V,v2=pred2V,v3=pred3V)
table(subtest$Survived,predict(combmodFit,predVDF))
pred1Vt<-predict(modFit,test)
pred2Vt<-predict(modFit2,test)
pred3Vt<-predict(modFit3,test)
predVDFt<-data.frame(v1=pred1Vt,v2=pred2Vt,v3=pred3Vt)
test$Survived<-predict(combmodFit,predVDFt)
write.csv(test[,1:2],"result.csv",row.names = FALSE)
pred1V<-predict(modFit,subtest)
pred2V<-predict(modFit2,subtest)
pred3V<-predict(modFit3,subtest)
predVDF<-data.frame(v1=pred1V,v2=pred2V,v3=pred3V)
confusionMatrix(subtest$Survived,predict(combmodFit,predVDF))
knitr::opts_chunk$set(echo = TRUE)
n=nrow(train)
rm(list=ls())
test$Survived<-predict(modFit,predVDFt)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(caret))
suppressMessages(library(DMwR))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(Hmisc))
if (!file.exists("train.csv"))
download.file("https://www.kaggle.com/c/titanic/download/train.csv","train.csv")
if (!file.exists("test.csv"))
download.file("https://www.kaggle.com/c/titanic/download/test.csv","test.csv")
train<-read.csv("train.csv")
test<-read.csv("test.csv")
names(train)
names(test)
test$Survived<-rep(NA,dim(test)[1])
total<-rbind(train,test)
str(total)
missingRate<-function(x)
{if (is.character(x))
{round(sum(x=="")/length(x)*100,3)}
else
{round(sum(is.na(x))/length(x)*100,3)}
}
missing<-sapply(total,missingRate)%>% data.frame()
names(missing)<-"missingRate"
missing$column<-rownames(missing)
rownames(missing)<-1:nrow(missing)
g<-ggplot(data.frame(missing),aes(x=reorder(column,missingRate),y=missingRate,fill=column))+geom_bar(stat="identity")+coord_flip(ylim=c(0,100))+geom_text(aes(label=missingRate),nudge_y=3)
g
total$Age<-knnImputation(total[,-2])$Age
missingIndex<-which(total$Embarked=="")
total[missingIndex,]$Embarked<-NA
total$Embarked<-knnImputation(total[,-2])$Embarked
total$Fare<-knnImputation(total[,-2])$Fare
total$Survived<-as.factor(total$Survived)
train$Survived<-as.factor(train$Survived)
dim(total)
n=nrow(train)
train<-total[1:n,]
table(total$Pclass)
ggplot(train,aes(Pclass,fill=Survived))+geom_bar(position="fill")
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
table(total$Sex)
quantile(total$Age)
ggplot(train,aes(Sex,fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(cut2(Age,18),fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(SibSp,fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(Parch,fill=Survived))+geom_bar(position="fill")
total$Familysize=total$SibSp+total$Parch
str(total$Ticket)
tnum<-table(total$Ticket)
TicketType<-function(x){
ifelse(tnum[x]>1,"Shared","Single")
}
total$TicketType<-as.factor(sapply(as.character(total$Ticket),TicketType))
quantile(total$Fare)
ggplot(train,aes(cut2(Fare,g=4),fill=Survived))+geom_bar(position="fill")
table(total$Embarked)
ggplot(train,aes(Embarked,fill=Survived))+geom_bar(position="fill")
n=nrow(train)
train<-total[1:n,]
test<-total[-(1:n),]
traincontrol<-trainControl(method="cv")
traindata<-train[,-c(1,4,7,8,9,11)]
modFit<-train(as.factor(Survived)~.,data=traindata,method="rf",trControl=traincontrol)
modFit2<-train(as.factor(Survived)~.,data=traindata,method="rpart",trControl=traincontrol)
modFit3<-train(as.factor(Survived)~.,data=traindata,method="gbm",trControl=traincontrol,verbose=FALSE)
modFit
modFit2
modFit3
test$Survived<-predict(modFit,predVDFt)
test$Survived<-predict(modFit,test)
write.csv(test[,1:2],"result1.csv",row.names = FALSE)
test$Survived<-predict(modFit3,test)
write.csv(test[,1:2],"result3.csv",row.names = FALSE)
ggplot(train,aes(SibSp,fill=Survived))+geom_bar(position="fill")
ggplot(train,aes(Parch,fill=Survived))+geom_bar(position="fill")
names(total)
rm(list=ls())
getwd()
dir())
dir()
setwd("Data-Specilisation/")
getwd()
dir()
dir.create(C9Week2)
dir.create("C9Week2")
setwd("C9Week2/")
install.packages("leaflet")
library(leaflet)
my_map %>% leaflet() %>% addMarkers()
my_map <- leaflet() %>% addMarkers()
my_map <- leaflet() %>% addTiles()
my_map
my_map %>% addMarkers(lat = 28.111,lng = 32.111,popup = "ABC")
my_map %>% addMarkers(lat = 28.111,lng = 120.111,popup = "ABC")
my_map %>% addMarkers(lat = 27.111,lng = 120.111,popup = "ABC")
my_map %>% addMarkers(lat = 76.589,lng = 39.298,popup = "ABC")
my_map %>% addMarkers(lng = 76.589,lat = 39.298,popup = "ABC")
my_map %>% addMarkers(lng = -76.589,lat = 39.298,popup = "ABC")
city<-read.csv("worldcities.csv")
head(city)
china_city<-city[city$country==China,]
grep("china",city$country)
str(city)
unique(city$country)
grep("China",city$country)
china_city<-city[city$country=="China",]
head(china_city)
china_city1<-china_city[,c(1,3,4)]
head(china_city1)
china_map<-china_city1 %>% leaflet() %>% addTiles()
china_map
head(china_city1)
china_map %>% addMarkers(clusterOptions = markerClusterOptions())
china_map %>% addMarkers(clusterOptions = markerClusterOptions(),popup = china_city1$city)
china_map %>% addMarkers(clusterOptions = markerClusterOptions())
