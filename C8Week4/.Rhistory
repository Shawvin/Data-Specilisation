mean(capitalAves)
sd(capitalAves)
summary(preObj)
set.seed(32343)
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
library(caret)
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
install.packages("e1071")
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
modelFit
index<-rbinom(nrows(training),size=1,prob=0.5)
index<-rbinom(nrow(training),size=1,prob=0.5)
training$capAve<-training$capitalAve
training$capAve[index]<-NA
preObj<-preProcess(training[,-58],method="knnImpute")
capAve<-predict(preObj,training[,-58])$capAve
install.packages("RANN")
capAve<-predict(preObj,training[,-58])$capAve
capAveTruth<-training$capitalAve
capAveTruth<-(capAveTruth-mean(capAveTruth))/sd(capAveTruth)
range(capAve)
range(capAveTruth)
sd(capAveTruth)
mean(capAveTruth)
mean(capAve)
sd(capAve)
?knnImpute
mean(training$capitalAve)
sd(training$capitalAve)
smallspam<-spam[,c(32,34)]
prComp<-prcomp(smallspam)
str(prComp)
summary(prComp)
range(prComp$x)
length(prComp$x)
prComp$rotation
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain1<-createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training1<-adData[inTrain1,]
testing1<-adData[-inTrain1,]
grep("^IL",names(training1))
grep("^IL",names(training1),value=TRUE)
ILindex<-grep("^IL",names(training1),value=TRUE)
smallTrain<-training1[,ILindex]
prComp1<-prcomp(smallTrain)
summary(prComp1)
prComp1$sdev
(prComp1$sdev)^2/sum((prComp1$sdev)^2)
(prComp1$sdev)^2/sum((prComp1$sdev)^2)*100
prComp1$rotation
modelFit<-train(training1$diagnosis~.,method="glm",data=smallTrain)
training1$diagnosis
modelFit<-train(training1$diagnosis~.,method="glm",data=smallTrain)
modelFit
modelFit1<-train(training1$diagnosis~.,method="glm",data=smallTrain)
modelFit1
preProc1<-preProcess(smallTrain,method="pca",pcaComp=3)
trainPc<-predict(preProc1,smallTrain)
modelFit1<-train(training1$diagnosis~.,method="glm",data=trainPc)
smallTrain<-cbind(smallTrain,training1$diagnosis)
names(smallTrain)
preProc1<-preProcess(smallTrain[,-13],method="pca",pcaComp=3)
trainPc<-predict(preProc1,smallTrain[,-13])
modelFit1<-train(diagnosis~.,method="glm",data=trainPc)
modelFit1<-train(smallTrain$diagnosis~.,method="glm",data=trainPc)
table(smallTrain$diagnosis)
table(training1$diagnosis)
modelFit1<-train(smallTrain$training1$diagnosis~.,method="glm",data=trainPc)
table(smallTrain$training1$diagnosis)
table(smallTrain[,training1$diagnosis])
table(smallTrain[,"training1$diagnosis"])
modelFit1<-train(smallTrain[,"training1$diagnosis]"~.,method="glm",data=trainPc)
modelFit1<-train(smallTrain[,"training1$diagnosis"]~.,method="glm",data=trainPc)
rm(list=ls())
version
?builder
library(shiny)
?builder
runApp('C9Week1/Slider')
runApp('C9Week1/Slider')
runApp('C9Week1/myApp')
rm(ls=list())
rm(list=ls())
shiny::runApp('C9Week1/Predict')
runApp('C9Week1/Predict')
mtcars$mpgsp<-ifelse(mtcars$mpg>20,mtcars$mpg-20,0)
head(mtcars)
runApp('C9Week1/Predict')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q5.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q5.R')
?varImp
varImp(modFit)
modFit
modFit$finalModel
?randomForest
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q5.R')
install.packages("randomForest")
install.packages("randomForest")
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q5.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week3/Q5.R')
?randomForest
??randomForest
library(randomForest)
varImp(modFit2)
modFit2<-randomForest(y~.,data=vowel.train)
?randomForest
randomForest
RandomForest
?RandomForest
randomForest::
?randomForest::
?randomForest
packageVersion(randomForest)
packageVersion("randomForest")
varImp(modFit)
?randomForest
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
modFit2<-randomForest(y~.,data=vowel.train)
library(randomForest)
modFit2<-randomForest(y~.,data=vowel.train)
varImp(modFit2)
library(caret)
varImp(modFit2)
importance(modFit2)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week2/PCA in Caret.R')
confusionMatrix(smallTest$diagnosis,predict(modelFit1,smallTest))
confusionMatrix(smallTest$diagnosis,predict(modelFit2,smallTest))
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week2/PCA in R.R')
preObj
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week2/PCA in R.R')
preObj2
rm(list=ls())
library("ISLR")
library("islr")
library(islr)
library(ISLR)
install.packages("ISLR")
library(ISLR)
data(wage)
data(Wage)
dim(Wage)
names(Wage)
plot(Wage$wage,Wage$logwage)
packageVersion("AppliedPredictiveModeling")
packageVersion("caret")
packageVersion("ElemStatLearn")
packageVersion("pgmm")
packageVersion("rpart")
packageVersion("gbm")
install.packages("gbm")
packageVersion("lubridate")
packageVersion("forecast")
install.packages("forecast")
packageVersion("e1071")
packageVersion("forecast")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
set.seed(33833)
modFit1<-train(y~.,data=vowel.train,method="rf")
modFit2<-train(y~.,data=vowel.train,method="gbm")
pred1<-predict(modFit1,vowel.test)
pred2<-predict(modFit2,vowel.test)
confusionMatrix(pred1,vowel.test$y)
confusionMatrix(pred2,vowel.test$y)
pred1<-predict(modFit1,vowel.test)
pred2<-predict(modFit2,vowel.test)
pred1
confusionMatrix(pred1,vowel.test$y)
pred1<-predict(modFit1,vowel.test)
pred2<-predict(modFit2,vowel.test)
confusionMatrix(pred1,vowel.test$y)
confusionMatrix(pred2,vowel.test$y)
confusionMatrix(table(pred1,vowel.test$y))
confusionMatrix(table(pred2,vowel.test$y))
confusionMatrix(table(pred1,vowel.test$y))
head(vowel.test)
str(vowel.test)
table(vowel.test$y)
table(pred1,vowel.test$y)
source('~/.active-rstudio-document')
confusionMatrix(table(pred1,vowel.test$y))
confusionMatrix(table(pred2,vowel.test$y))
confusionMatrix(table(pred1,vowel.test$y))
confusionMatrix(table(pred2,vowel.test$y))
df<-data.frame(pred1=pred1,pred2=pred2,y=vowel.test$y)
modFit<-train(y~pred1+pred2,data=df,method="gam")
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test)
confusionMatrix(table(pred,vowel.test))
confusionMatrix(pred,vowel.test$y)
pred<-predict(modFit,df)
table(pred)
modFit
str(df)
class(pred1)
table(pred1)
table(pred2)
table(level(pred2)[pred2])
table(levels(pred2)[pred2])
class(levels(pred2)[pred2])
class(as.numeric(levels(pred2)[pred2]))
df<-data.frame(pred1=as.numeric(levels(pred1)[pred1]),pred2=as.numeric(levels(pred2)[pred2]),y=vowel.test$y)
str(df)
modFit<-train(y~pred1+pred2,data=df,method="gam")
modFit<-train(y~pred1+pred2,data=df,method="gam")
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
head(df)
str(df)
table(pred1,pred2)
confusionMatrix(pred1,pred2)
G<-ggplot(df,aes(pred1,pred2,col=y))
G+geom_point()
G+geom_point(gitter)
G+geom_point("gitter")
G+geom_point(aes("gitter")
)
G+geom_jitter()
modFit
modFit<-train(y~pred1+pred2,data=df)
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
modFit<-train(y~.,data=df)
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
modFit<-train(y~.,data=df,method="gam")
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
df<-data.frame(pred1,pred2,y=vowel.test$y)
modFit<-train(y~.,data=df,method="gam")
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
confusionMatrix(pred1,vowel.test$y)
set.seed(33833)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
modFit1<-train(y~.,data=vowel.train,method="rf")
modFit2<-train(y~.,data=vowel.train,method="gbm")
pred1<-predict(modFit1,vowel.test)
pred2<-predict(modFit2,vowel.test)
confusionMatrix(pred1,vowel.test$y)
confusionMatrix(pred2,vowel.test$y)
confusionMatrix(pred1,pred2)
source('~/.active-rstudio-document')
rm(list=ls())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
modFit<-train(diagnosis~.,data=df,method="rf")
pred<-predict(modFit,df)
confusionMatrix(pred1,testing$diagnosis)$overall[1]
confusionMatrix(pred2,testing$diagnosis)$overall[1]
confusionMatrix(pred3,testing$diagnosis)$overall[1]
confusionMatrix(pred,testing$diagnosis)$overall[1]
modFit<-train(diagnosis~.,data=df,method="rf")
table(pred1,testing$diagnosis)
table(pred2,testing$diagnosis)
table(pred3,testing$diagnosis)
confusionMatrix(pred1,testing$diagnosis)$overall[1]
confusionMatrix(pred2,testing$diagnosis)$overall[1]
confusionMatrix(pred3,testing$diagnosis)$overall[1]
confusionMatrix(pred,testing$diagnosis)$overall[1]
?prop.table
prop.table(pred3,testing$diagnosis)
prop.table((pred3,testing$diagnosis),2)
prop.table(table(pred3,testing$diagnosis),2)
prop.table(table(pred3,testing$diagnosis),1)
df<-data.frame(pred1,pred2,pred3,testing$diagnosis)
str(df)
modFit<-train(diagnosis~.,data=df,method="rf")
length(pred1)
length(pred2)
length(pred3)
table(pred3)
df<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
str(df)
modFit<-train(diagnosis~.,data=df,method="rf")
pred<-predict(modFit,df)
confusionMatrix(pred1,testing$diagnosis)$overall[1]
confusionMatrix(pred2,testing$diagnosis)$overall[1]
confusionMatrix(pred3,testing$diagnosis)$overall[1]
confusionMatrix(pred,testing$diagnosis)$overall[1]
rm(list=ls())
source('~/.active-rstudio-document')
names(training)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q1.R')
confusionMatrix(pred1,vowel.test$y)$overall[1]
confusionMatrix(pred2,vowel.test$y)$overall[1]
confusionMatrix(pred1,pred2)$overall[1]
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q2.R')
confusionMatrix(pred1,testing$diagnosis)$overall[1]
confusionMatrix(pred2,testing$diagnosis)$overall[1]
confusionMatrix(pred3,testing$diagnosis)$overall[1]
confusionMatrix(pred,testing$diagnosis)$overall[1]
rm(list=ls())
?plot.enet
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q3.R')
?plot.enet
str(training)
set.seed(233)
modFit<-train(CompressiveStrength~.,data=training,method="lass")
set.seed(233)
modFit<-train(CompressiveStrength~.,data=training,method="lasso")
?plot.enet
modFit
testIFt<-lm(CompressiveStrength~.,data=training)
testFit
testIFt
plot.enet(modFIt)
library(elasticnet)
plot.enet(modFit)
plot.enet(testIFt)
summary(testIFt)
summary(modFit)
summary(modFit)$penalty
summary(modFit)[11]
summary(modFit)[11,]
summary(modFit)[10]
summary(modFit)$tuneValue
summary(modFit)$tuneValue
?lasso
summary(modFit)[[1]]
summary(modFit)[[2]]
summary(modFit)[[10]]
summary(modFit)[[11]]
str(modFit)
modFit$finalModel
modFit
plot.enet(modFit$finalModel)
url="https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(url,"gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
head(dat)
plot(tstrain)
head(tstrain)
install.packages("forcast")
install.packages("forecast")
library(forecast)
?bats
?forecast
source('~/.active-rstudio-document')
pred<-forecast(modFit)
pred
head(testing)
head(gaData)
head(dat)
pred<-forecast(modFit,h=dim(testing)[1])
head(pred)
pred
dim(pred)
class(pred)
pred<-forecast(modFit,h=20,level=95)
pred
pred[1]
summary(pred)
plot(pred)
tstest = ts(testing$visitsTumblr)
plot(tstest)
?ts
tstest = ts(testing$visitsTumblr,start=366)
plot(tstest)
line(pred)
plot(pred)
line(tstest)
lines(tstest)
pred<-forecast(modFit,h=nrow(testing),level=95)
plot(pred)
lines(tstest)
pred$upper
table(tstest<pred$upper)
prop.table(tstest<pred$upper)
t<-table(tstest<pred$upper)
prop.table(t)
t<-table(tstest<pred$upper$tstest>pred$lower)
t<-table(tstest<pred$upper&tstest>pred$lower)
prop.table(t)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
head(training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
modFit<-svm(CompressiveStrength~.,data=training)
predict(modFit,testing)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
modFit<-svm(CompressiveStrength~.,data=training)
pred<-predict(modFit,testing)
summary(modFit)
modFit
sqrt(sum(pred-testing$CompressiveStrength)^2)
source('~/.active-rstudio-document')
sqrt(sum(pred-testing$CompressiveStrength)^2)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q3.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q3.R')
plot.enet(modFit$finalModel,xvar="penalty".use.color=TRUE)
plot.enet(modFit$finalModel,xvar="penalty",use.color=TRUE)
accuracy(pred,testing$CompressiveStrength)
accuracy(pred,testing$CompressiveStrength)$RMSE
shiny::runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp()
runApp()
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/BrushDemo')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
getwd()
install.packages("plotly")
library(plotly)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
data(mtcars)
head(mtcars)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
library(plotly)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
?plot_ly
plot_ly(data=mtcars,x=wt,y=mpg,mode="markers")
plot_ly(data=mtcars,x=~wt,y=~mpg,mode="markers")
getwd()
setwd("C8Week4")
getwd()
file.exists("training.csv")
install.packages("DataExplorer")
library(DataExplorer)
knitr::opts_chunk$set(echo = TRUE)
training<-read.csv("training.csv")
plot_str(training)
str(training)
names(training)
table(training$classe)
table(training$max_roll_belt)
unique(training$max_roll_belt)
table(training$max_roll_belt==NA)
table(training$max_roll_belt=="NA")
table(training$max_roll_belt==NA)
table(is.na(training$max_roll_belt)
)
plot_missing(training)
apply(training,2,function(x){ return sum(is.na(x))/length(x)})
apply(training,2,function(x){sum(is.na(x))/length(x)})
apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
names(training)[apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})]
index<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
unwanted<-names(training)[index]
training<-training[,-unwanted]
index<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
unwanted<-names(training)[index]
unwanted
training1<-training[,-c(unwanted)]
training1<-training[,unwanted]
wanted
wanted<-names(training)[!index]
wanted
str(training1)
selected<-names(training)[!index]
selected
training1<-training[,selected]
str(training1)
training1$total_accel_belt
table(training1$total_accel_belt)
table(training1[,1])
table(training1[,2])
table(training1[,3])
table(training1[,4])
table(training1[,5])
str(traing1)
str(training1)
index<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
selected<-names(training)[!index]
training<-training[,selected]
index<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
selected<-names(training)[!index]
training<-training[,selected]
training<-training[,-c(1:6)]
str(training)
